#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'

require_relative '../utils/errors'
require_relative '../utils/config_helper'

options = {
  profile: 'default',
  number_of_processes: '1',
  cucumber_format: 'progress',
  headless: 'true'
}

OptionParser.new do |opts|
  opts.banner = 'Usage: bin/run-cucumber <env> [options] <features>'

  opts.on('-pPROFILE', '--profile=PROFILE', 'Set cucumber profile [default: default]') do |profile|
    options[:profile] = profile
  end

  opts.on('-nNUMBER_OF_PROCESSES', '--number-of-processes=NUMBER_OF_PROCESSES', 'Set the number of proccesses to use in parallel [default: 1]') do |number_of_processes|
    options[:number_of_processes] = number_of_processes
  end

  opts.on('-fCUCUMBER_FORMAT', '--cucumber-format=CUCUMBER_FORMAT', 'Set the cucumber format [default: progress]') do |cucumber_format|
    options[:cucumber_format] = cucumber_format
  end

  opts.on('-hHEADLESS', '--headless=HEADLESS', 'Set the headless mode to run the test in [default: true]') do |headless|
    options[:headless] = headless
  end
end.parse!

options[:env]             = ARGV[0]
options[:additional_args] = ARGV[1..].join(' ')

# Check we have enough users for the number of process
puts 'Checking enough users are available'

config = ConfigHelper.get_config(options[:env])

%w[buyer admin].each do |role|
  raise MissingCredentialsError, { role:, index: options[:number_of_processes] } unless config.dig('users', role).length >= options[:number_of_processes].to_i
end

puts 'Enough users found!'

# Clean the reports directory
FileUtils.rm_rf 'reports'
FileUtils.mkdir_p 'reports'

# Run the cucumber tests
cucumber_command = if options[:number_of_processes] == '1'
                     "cucumber -p #{options[:profile]} #{options[:additional_args]}"
                   else
                     "parallel_cucumber -n #{options[:number_of_processes]} -o '-p parallel_#{options[:profile]} #{options[:additional_args]}'"
                   end

result = system("CUCUMBER_FORMAT=#{options[:cucumber_format]} HEADLESS=#{options[:headless]} TEST_ENV=#{options[:env]} bundle exec #{cucumber_command}")

# Re run tests if we get any failures
unless result
  # Clean up rerun file
  rerun_file = 'reports/rerun.txt'

  new_rerun_content = File.readlines(rerun_file).map do |line|
    line.scan(/(?::\d+features)/).map { |match_data| [match_data, "#{match_data[..-9]}\n#{match_data[-8..]}"] }.each do |find_arg, replace_arg|
      line.gsub!(find_arg, replace_arg)
    end

    line
  end.join

  File.write(rerun_file, new_rerun_content)

  # Re run the failed tests
  system("CUCUMBER_FORMAT=#{options[:cucumber_format]} HEADLESS=#{options[:headless]} TEST_ENV=#{options[:env]} bundle exec cucumber -p rerun")
end

# Build the report
system("bundle exec report_builder -s 'reports' -o 'reports/index' -f html -T 'Functional Test Results - #{options[:profile].capitalize}'")
